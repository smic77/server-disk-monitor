# docker-compose.yml pour Repository Stack Portainer
# Optimisé pour déploiement direct depuis GitHub

version: '3.8'

services:
  server-disk-monitor:
    # Image qui sera buildée automatiquement par GitHub Actions
    image: ghcr.io/${GITHUB_USERNAME}/server-disk-monitor:${IMAGE_TAG:-latest}
    container_name: server-disk-monitor
    ports:
      - "${MONITOR_PORT:-5000}:5000"
    volumes:
      # Volume persistant pour les données
      - server_monitor_data:/app/data
      # Optionnel: montage clés SSH
      - type: bind
        source: ${SSH_KEYS_PATH:-/opt/server-monitor/ssh-keys}
        target: /root/.ssh
        read_only: true
        bind:
          create_host_path: true
    environment:
      # Configuration Flask
      - FLASK_ENV=${FLASK_ENV:-production}
      - TZ=${TIMEZONE:-Europe/Paris}
      
      # Configuration monitoring
      - REFRESH_INTERVAL=${REFRESH_INTERVAL:-30}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MAX_CONNECTIONS=${MAX_CONNECTIONS:-100}
      
      # Configuration sécurité
      - SECRET_KEY=${SECRET_KEY:-change-this-secret-key}
    restart: unless-stopped
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      # Labels Portainer
      - "portainer.stack.name=server-disk-monitor"
      - "portainer.category=Monitoring"
      
      # Labels Traefik (optionnel)
      - "traefik.enable=${TRAEFIK_ENABLE:-false}"
      - "traefik.http.routers.disk-monitor.rule=Host(`${DOMAIN:-monitor.local}`)"
      - "traefik.http.routers.disk-monitor.entrypoints=web"
      - "traefik.http.services.disk-monitor.loadbalancer.server.port=5000"
      
      # Métadonnées
      - "org.opencontainers.image.title=Server Disk Monitor"
      - "org.opencontainers.image.description=Dashboard de surveillance des disques serveurs"
      - "org.opencontainers.image.source=https://github.com/${GITHUB_USERNAME}/server-disk-monitor"

  # Service optionnel: Nginx reverse proxy
  nginx-proxy:
    image: nginx:alpine
    container_name: disk-monitor-proxy
    ports:
      - "${PROXY_PORT:-80}:80"
    depends_on:
      - server-disk-monitor
    networks:
      - monitoring
    profiles:
      - proxy  # Activé seulement si --profile proxy
    volumes:
      - nginx_config:/etc/nginx/conf.d
    command: |
      sh -c "
        echo 'server {
          listen 80;
          server_name _;
          client_max_body_size 10M;
          
          location / {
            proxy_pass http://server-disk-monitor:5000;
            proxy_set_header Host \$$host;
            proxy_set_header X-Real-IP \$$remote_addr;
            proxy_set_header X-Forwarded-For \$$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$$scheme;
          }
          
          location /socket.io/ {
            proxy_pass http://server-disk-monitor:5000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade \$$http_upgrade;
            proxy_set_header Connection \"upgrade\";
            proxy_set_header Host \$$host;
          }
        }' > /etc/nginx/conf.d/default.conf &&
        nginx -g 'daemon off;'
      "
    labels:
      - "portainer.stack.name=server-disk-monitor"

networks:
  monitoring:
    driver: bridge
    name: server-monitor-network
    labels:
      - "portainer.stack.name=server-disk-monitor"

volumes:
  server_monitor_data:
    driver: local
    labels:
      - "portainer.stack.name=server-disk-monitor"
  nginx_config:
    driver: local
    labels:
      - "portainer.stack.name=server-disk-monitor"